{
	"info": {
		"_postman_id": "ef787abd-e2fb-4855-abda-dc9883389954",
		"name": "Restaurant Functions Tests",
		"description": "Hello",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get_customer",
			"item": [
				{
					"name": "get_customer_33",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b62d94a5-2668-4fb6-8d79-51ca1f175ed9",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Customers ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Customers first name is present\"] = responseBody.has(\"f_name\");",
									"tests[\"Customers surname is present\"] = responseBody.has(\"s_name\");",
									"tests[\"Customers phone is present\"] = responseBody.has(\"phone\");",
									"tests[\"Customers birthdate is present\"] = responseBody.has(\"birthdate\");",
									"tests[\"Customers email is present\"] = responseBody.has(\"email\");",
									"tests[\"Customers address is present\"] = responseBody.has(\"c_address\");",
									"",
									"// Define the JSON Schema",
									"const customerSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"birthdate\",",
									"    \"c_address\",",
									"    \"customer_id\",",
									"    \"email\",",
									"    \"f_name\",",
									"    \"phone\",",
									"    \"s_name\"",
									"  ],",
									"  \"properties\": {",
									"    \"birthdate\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"c_address\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"email\": {",
									"        \"type\": \"string\",",
									"    },",
									"    \"f_name\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"s_name\": {",
									"      \"type\": \"string\",",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Customer schema is valid\"] = tv4.validate(jsonData, customerSchema);",
									"tests[\"Customers ID should be: \"+jsonData.customer_id] = jsonData.customer_id == 33;",
									"tests[\"Customers f_name should be: \"+jsonData.f_name] = jsonData.f_name == \"Daniel\";",
									"tests[\"Customers s_name should be: \"+jsonData.s_name] = jsonData.s_name == \"Martinez\";",
									"tests[\"Customers phone number should be: \"+jsonData.phone] = jsonData.phone == 15151385;",
									"tests[\"Customers birthdate should be: \"+jsonData.birthdate] = jsonData.birthdate == \"Mon, 30 Jan 2006 00:00:00 GMT\";",
									"tests[\"Customers email should be: \"+jsonData.email] = jsonData.email == \"joehood@simpson.com\";",
									"tests[\"Customers c_address should be: \"+jsonData.c_address] = jsonData.c_address == \"036 Kevin Circles Suite 696 Mirandamouth, MA 33841\";",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:5000/statistics/customers/33/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"customers",
								"33",
								""
							]
						},
						"description": "Getting a specific customers details"
					},
					"response": []
				},
				{
					"name": "get_customer_45",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58c8d53d-e5b2-4ab4-9349-14065d95e55f",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Customers ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Customers first name is present\"] = responseBody.has(\"f_name\");",
									"tests[\"Customers surname is present\"] = responseBody.has(\"s_name\");",
									"tests[\"Customers phone is present\"] = responseBody.has(\"phone\");",
									"tests[\"Customers birthdate is present\"] = responseBody.has(\"birthdate\");",
									"tests[\"Customers email is present\"] = responseBody.has(\"email\");",
									"tests[\"Customers address is present\"] = responseBody.has(\"c_address\");",
									"",
									"// Define the JSON Schema",
									"const customerSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"birthdate\",",
									"    \"c_address\",",
									"    \"customer_id\",",
									"    \"email\",",
									"    \"f_name\",",
									"    \"phone\",",
									"    \"s_name\"",
									"  ],",
									"  \"properties\": {",
									"    \"birthdate\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"c_address\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"email\": {",
									"        \"type\": \"string\",",
									"    },",
									"    \"f_name\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"s_name\": {",
									"      \"type\": \"string\",",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Customer schema is valid\"] = tv4.validate(jsonData, customerSchema);",
									"tests[\"Customers ID should be: \"+jsonData.customer_id] = jsonData.customer_id == 45;",
									"tests[\"Customers f_name should be: \"+jsonData.f_name] = jsonData.f_name == \"Caroline\";",
									"tests[\"Customers s_name should be: \"+jsonData.s_name] = jsonData.s_name == \"Phillips\";",
									"tests[\"Customers phone number should be: \"+jsonData.phone] = jsonData.phone == 5349423;",
									"tests[\"Customers birthdate should be: \"+jsonData.birthdate] = jsonData.birthdate == \"Thu, 21 Oct 1971 00:00:00 GMT\";",
									"tests[\"Customers email should be: \"+jsonData.email] = jsonData.email == \"elizabeth01@yahoo.com\";",
									"tests[\"Customers c_address should be: \"+jsonData.c_address] = jsonData.c_address == \"214 Amy Glen Richardmouth, NC 38305\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:5000/statistics/customers/45/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"customers",
								"45",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_customer_22",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0150eeb9-a051-41d6-93b5-ac15e517454c",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Customers ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Customers first name is present\"] = responseBody.has(\"f_name\");",
									"tests[\"Customers surname is present\"] = responseBody.has(\"s_name\");",
									"tests[\"Customers phone is present\"] = responseBody.has(\"phone\");",
									"tests[\"Customers birthdate is present\"] = responseBody.has(\"birthdate\");",
									"tests[\"Customers email is present\"] = responseBody.has(\"email\");",
									"tests[\"Customers address is present\"] = responseBody.has(\"c_address\");",
									"",
									"// Define the JSON Schema",
									"const customerSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"birthdate\",",
									"    \"c_address\",",
									"    \"customer_id\",",
									"    \"email\",",
									"    \"f_name\",",
									"    \"phone\",",
									"    \"s_name\"",
									"  ],",
									"  \"properties\": {",
									"    \"birthdate\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"c_address\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"email\": {",
									"        \"type\": \"string\",",
									"    },",
									"    \"f_name\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"s_name\": {",
									"      \"type\": \"string\",",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Customer schema is valid\"] = tv4.validate(jsonData, customerSchema);",
									"tests[\"Customers ID should be: \"+jsonData.customer_id] = jsonData.customer_id == 22;",
									"tests[\"Customers f_name should be: \"+jsonData.f_name] = jsonData.f_name == \"John\";",
									"tests[\"Customers s_name should be: \"+jsonData.s_name] = jsonData.s_name == \"Cooley\";",
									"tests[\"Customers phone number should be: \"+jsonData.phone] = jsonData.phone == 22945985;",
									"tests[\"Customers birthdate should be: \"+jsonData.birthdate] = jsonData.birthdate == \"Mon, 14 Aug 2006 00:00:00 GMT\";",
									"tests[\"Customers email should be: \"+jsonData.email] = jsonData.email == \"boydtyler@wade-becker.com\";",
									"tests[\"Customers c_address should be: \"+jsonData.c_address] = jsonData.c_address == \"57161 Thomas Shore Lucerofort, WY 62682\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:5000/statistics/customers/22/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"customers",
								"22",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_customer_14",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdec50af-4917-47d9-9e05-12b431720a34",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Customers ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Customers first name is present\"] = responseBody.has(\"f_name\");",
									"tests[\"Customers surname is present\"] = responseBody.has(\"s_name\");",
									"tests[\"Customers phone is present\"] = responseBody.has(\"phone\");",
									"tests[\"Customers birthdate is present\"] = responseBody.has(\"birthdate\");",
									"tests[\"Customers email is present\"] = responseBody.has(\"email\");",
									"tests[\"Customers address is present\"] = responseBody.has(\"c_address\");",
									"",
									"// Define the JSON Schema",
									"const customerSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"birthdate\",",
									"    \"c_address\",",
									"    \"customer_id\",",
									"    \"email\",",
									"    \"f_name\",",
									"    \"phone\",",
									"    \"s_name\"",
									"  ],",
									"  \"properties\": {",
									"    \"birthdate\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"c_address\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"email\": {",
									"        \"type\": \"string\",",
									"    },",
									"    \"f_name\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"s_name\": {",
									"      \"type\": \"string\",",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Customer schema is valid\"] = tv4.validate(jsonData, customerSchema);",
									"tests[\"Customers ID should be: \"+jsonData.customer_id] = jsonData.customer_id == 14;",
									"tests[\"Customers f_name should be: \"+jsonData.f_name] = jsonData.f_name == \"Aaron\";",
									"tests[\"Customers s_name should be: \"+jsonData.s_name] = jsonData.s_name == \"Robinson\";",
									"tests[\"Customers phone number should be: \"+jsonData.phone] = jsonData.phone == 81027637;",
									"tests[\"Customers birthdate should be: \"+jsonData.birthdate] = jsonData.birthdate == \"Sun, 23 Feb 1975 00:00:00 GMT\";",
									"tests[\"Customers email should be: \"+jsonData.email] = jsonData.email == \"chelsey72@yahoo.com\";",
									"tests[\"Customers c_address should be: \"+jsonData.c_address] = jsonData.c_address == \"12001 Aaron Drive Lake Amy, NV 23795\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/customers/14/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"customers",
								"14",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_customer_47",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c7a511b-efe6-43c6-8286-1458f1541bf3",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Customers ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Customers first name is present\"] = responseBody.has(\"f_name\");",
									"tests[\"Customers surname is present\"] = responseBody.has(\"s_name\");",
									"tests[\"Customers phone is present\"] = responseBody.has(\"phone\");",
									"tests[\"Customers birthdate is present\"] = responseBody.has(\"birthdate\");",
									"tests[\"Customers email is present\"] = responseBody.has(\"email\");",
									"tests[\"Customers address is present\"] = responseBody.has(\"c_address\");",
									"",
									"// Define the JSON Schema",
									"const customerSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"birthdate\",",
									"    \"c_address\",",
									"    \"customer_id\",",
									"    \"email\",",
									"    \"f_name\",",
									"    \"phone\",",
									"    \"s_name\"",
									"  ],",
									"  \"properties\": {",
									"    \"birthdate\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"c_address\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"email\": {",
									"        \"type\": \"string\",",
									"    },",
									"    \"f_name\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"s_name\": {",
									"      \"type\": \"string\",",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Customer schema is valid\"] = tv4.validate(jsonData, customerSchema);",
									"tests[\"Customers ID should be: \"+jsonData.customer_id] = jsonData.customer_id == 47;",
									"tests[\"Customers f_name should be: \"+jsonData.f_name] = jsonData.f_name == \"Douglas\";",
									"tests[\"Customers s_name should be: \"+jsonData.s_name] = jsonData.s_name == \"Morales\";",
									"tests[\"Customers phone number should be: \"+jsonData.phone] = jsonData.phone == 35556359;",
									"tests[\"Customers birthdate should be: \"+jsonData.birthdate] = jsonData.birthdate == \"Sun, 22 May 2016 00:00:00 GMT\";",
									"tests[\"Customers email should be: \"+jsonData.email] = jsonData.email == \"meyercarol@young.com\";",
									"tests[\"Customers c_address should be: \"+jsonData.c_address] = jsonData.c_address == \"74647 Sloan Forest Suite 583 Perezburgh, CO 93171\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/customers/47/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"customers",
								"47",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_customer_6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29b2820b-3f77-4453-a704-2083195d1b31",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Customers ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Customers first name is present\"] = responseBody.has(\"f_name\");",
									"tests[\"Customers surname is present\"] = responseBody.has(\"s_name\");",
									"tests[\"Customers phone is present\"] = responseBody.has(\"phone\");",
									"tests[\"Customers birthdate is present\"] = responseBody.has(\"birthdate\");",
									"tests[\"Customers email is present\"] = responseBody.has(\"email\");",
									"tests[\"Customers address is present\"] = responseBody.has(\"c_address\");",
									"",
									"// Define the JSON Schema",
									"const customerSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"birthdate\",",
									"    \"c_address\",",
									"    \"customer_id\",",
									"    \"email\",",
									"    \"f_name\",",
									"    \"phone\",",
									"    \"s_name\"",
									"  ],",
									"  \"properties\": {",
									"    \"birthdate\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"c_address\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"email\": {",
									"        \"type\": \"string\",",
									"    },",
									"    \"f_name\": {",
									"      \"type\": \"string\",",
									"    },",
									"    \"phone\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"s_name\": {",
									"      \"type\": \"string\",",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Customer schema is valid\"] = tv4.validate(jsonData, customerSchema);",
									"tests[\"Customers ID should be: \"+jsonData.customer_id] = jsonData.customer_id == 6;",
									"tests[\"Customers f_name should be: \"+jsonData.f_name] = jsonData.f_name == \"James\";",
									"tests[\"Customers s_name should be: \"+jsonData.s_name] = jsonData.s_name == \"Lewis\";",
									"tests[\"Customers phone number should be: \"+jsonData.phone] = jsonData.phone == 33304475;",
									"tests[\"Customers birthdate should be: \"+jsonData.birthdate] = jsonData.birthdate == \"Sat, 03 Mar 2007 00:00:00 GMT\";",
									"tests[\"Customers email should be: \"+jsonData.email] = jsonData.email == \"weissvalerie@yahoo.com\";",
									"tests[\"Customers c_address should be: \"+jsonData.c_address] = jsonData.c_address == \"675 Andrew Drive Rogershaven, MS 22063\";",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/customers/6/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"customers",
								"6",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get_dish",
			"item": [
				{
					"name": "get_dish_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df7727f0-330d-4069-8290-bb2e6e935694",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Dish name is present\"] = responseBody.has(\"dish_name\");",
									"tests[\"Dish price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const dishSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"dish_id\",",
									"    \"dish_name\",",
									"    \"price\"",
									"  ],",
									"  \"properties\": {",
									"    \"dish_id\": {",
									"      \"type\": \"integer\",",
									"    },",
									"    \"dish_name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Dish schema is valid\"] = tv4.validate(jsonData, dishSchema);",
									"tests[\"Dish ID should be: \"+jsonData.dish_id] = jsonData.dish_id == 3",
									"tests[\"Dish name should be: \"+jsonData.dish_name] = jsonData.dish_name == \"Ribeye\"",
									"tests[\"Dish price should be: \"+jsonData.price] = jsonData.price == 307"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:5000/statistics/dish/3/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"dish",
								"3",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_dish_8",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df7727f0-330d-4069-8290-bb2e6e935694",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Dish name is present\"] = responseBody.has(\"dish_name\");",
									"tests[\"Dish price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const dishSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"dish_id\",",
									"    \"dish_name\",",
									"    \"price\"",
									"  ],",
									"  \"properties\": {",
									"    \"dish_id\": {",
									"      \"type\": \"integer\",",
									"    },",
									"    \"dish_name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Dish schema is valid\"] = tv4.validate(jsonData, dishSchema);",
									"tests[\"Dish ID should be: \"+jsonData.dish_id] = jsonData.dish_id == 8;",
									"tests[\"Dish name should be: \"+jsonData.dish_name] = jsonData.dish_name == \"Bibimbap\";",
									"tests[\"Dish price should be: \"+jsonData.price] = jsonData.price == 783;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:5000/statistics/dish/8/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"dish",
								"8",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_dish_5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ccf669f-77be-4c3e-abba-7871ab0cbbd5",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Dish name is present\"] = responseBody.has(\"dish_name\");",
									"tests[\"Dish price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const dishSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"dish_id\",",
									"    \"dish_name\",",
									"    \"price\"",
									"  ],",
									"  \"properties\": {",
									"    \"dish_id\": {",
									"      \"type\": \"integer\",",
									"    },",
									"    \"dish_name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Dish schema is valid\"] = tv4.validate(jsonData, dishSchema);",
									"tests[\"Dish ID should be: \"+jsonData.dish_id] = jsonData.dish_id == 5",
									"tests[\"Dish name should be: \"+jsonData.dish_name] = jsonData.dish_name == \"Cesar Salad\"",
									"tests[\"Dish price should be: \"+jsonData.price] = jsonData.price == 404"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/dish/5/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"dish",
								"5",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_dish_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "033fed22-7f25-46cc-82cc-7278141a1b98",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Dish name is present\"] = responseBody.has(\"dish_name\");",
									"tests[\"Dish price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const dishSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"dish_id\",",
									"    \"dish_name\",",
									"    \"price\"",
									"  ],",
									"  \"properties\": {",
									"    \"dish_id\": {",
									"      \"type\": \"integer\",",
									"    },",
									"    \"dish_name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  }",
									"};",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Dish schema is valid\"] = tv4.validate(jsonData, dishSchema);",
									"tests[\"Dish ID should be: \"+jsonData.dish_id] = jsonData.dish_id == 1",
									"tests[\"Dish name should be: \"+jsonData.dish_name] = jsonData.dish_name == \"Pepperoni Pizza\"",
									"tests[\"Dish price should be: \"+jsonData.price] = jsonData.price == 694"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/dish/1/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"dish",
								"1",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get_order",
			"item": [
				{
					"name": "get_order_67",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5688c60-3a19-45af-939e-0620a0fa5964",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Order ID is present\"] = responseBody.has(\"order_id\");",
									"tests[\"Orders timestamp is present\"] = responseBody.has(\"timestamp\");",
									"tests[\"Orders type is present\"] = responseBody.has(\"order_type\");",
									"tests[\"Customer ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Orders delivery option is present\"] = responseBody.has(\"delivery\");",
									"tests[\"Orders price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const orderSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"customer_id\",",
									"    \"date\",",
									"    \"delivery\",",
									"    \"dish_id\",",
									"    \"order_id\",",
									"    \"order_type\",",
									"    \"price\",",
									"    \"timestamp\"",
									"  ],",
									"  \"properties\": {",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"date\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"delivery\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"dish_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"timestamp\": {",
									"      \"type\": \"string\"",
									"    }",
									"  }",
									"}",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Order schema is valid\"] = tv4.validate(jsonData, orderSchema);",
									"tests[\"Orders ID should be: \"+jsonData.order_id] = jsonData.order_id == 67;",
									"tests[\"Orders timestamp should be: \"+jsonData.timestamp] = jsonData.timestamp == \"6:59:45\";",
									"tests[\"Orders date should be: \"+jsonData.date] = jsonData.date == \"Sat, 22 Sep 2018 00:00:00 GMT\";",
									"tests[\"Orders type should be: \"+jsonData.order_type] = jsonData.order_type == \"inhouse\";",
									"tests[\"Orders customer id should be: \"+jsonData.customer_id] = jsonData.customer_id == 32;",
									"tests[\"Orders dish id should be: \"+jsonData.dish_id] = jsonData.dish_id == 7;",
									"tests[\"Orders delivery option should be: \"+jsonData.delivery] = jsonData.delivery == \"Drone\";",
									"tests[\"Orders price should be: \"+jsonData.price] = jsonData.price == 739;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "localhost:5000/statistics/orders/67/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"orders",
								"67",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_order_34",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69058d71-9c84-4202-a2d0-997b7418c531",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Order ID is present\"] = responseBody.has(\"order_id\");",
									"tests[\"Orders timestamp is present\"] = responseBody.has(\"timestamp\");",
									"tests[\"Orders type is present\"] = responseBody.has(\"order_type\");",
									"tests[\"Customer ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Orders delivery option is present\"] = responseBody.has(\"delivery\");",
									"tests[\"Orders price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const orderSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"customer_id\",",
									"    \"date\",",
									"    \"delivery\",",
									"    \"dish_id\",",
									"    \"order_id\",",
									"    \"order_type\",",
									"    \"price\",",
									"    \"timestamp\"",
									"  ],",
									"  \"properties\": {",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"date\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"delivery\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"dish_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"timestamp\": {",
									"      \"type\": \"string\"",
									"    }",
									"  }",
									"}",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Order schema is valid\"] = tv4.validate(jsonData, orderSchema);",
									"tests[\"Orders ID should be: \"+jsonData.order_id] = jsonData.order_id == 34;",
									"tests[\"Orders timestamp should be: \"+jsonData.timestamp] = jsonData.timestamp == \"4:38:00\";",
									"tests[\"Orders date should be: \"+jsonData.date] = jsonData.date == \"Sat, 26 May 2018 00:00:00 GMT\";",
									"tests[\"Orders type should be: \"+jsonData.order_type] = jsonData.order_type == \"inhouse\";",
									"tests[\"Orders customer id should be: \"+jsonData.customer_id] = jsonData.customer_id == 42;",
									"tests[\"Orders dish id should be: \"+jsonData.dish_id] = jsonData.dish_id == 9;",
									"tests[\"Orders delivery option should be: \"+jsonData.delivery] = jsonData.delivery == \"Car\";",
									"tests[\"Orders price should be: \"+jsonData.price] = jsonData.price == 886;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/orders/34/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"orders",
								"34",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_order_55",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1466fc1-8a15-421f-b9c6-58f3b21d7185",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Order ID is present\"] = responseBody.has(\"order_id\");",
									"tests[\"Orders timestamp is present\"] = responseBody.has(\"timestamp\");",
									"tests[\"Orders type is present\"] = responseBody.has(\"order_type\");",
									"tests[\"Customer ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Orders delivery option is present\"] = responseBody.has(\"delivery\");",
									"tests[\"Orders price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const orderSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"customer_id\",",
									"    \"date\",",
									"    \"delivery\",",
									"    \"dish_id\",",
									"    \"order_id\",",
									"    \"order_type\",",
									"    \"price\",",
									"    \"timestamp\"",
									"  ],",
									"  \"properties\": {",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"date\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"delivery\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"dish_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"timestamp\": {",
									"      \"type\": \"string\"",
									"    }",
									"  }",
									"}",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Order schema is valid\"] = tv4.validate(jsonData, orderSchema);",
									"tests[\"Orders ID should be: \"+jsonData.order_id] = jsonData.order_id == 55;",
									"tests[\"Orders timestamp should be: \"+jsonData.timestamp] = jsonData.timestamp == \"6:44:58\";",
									"tests[\"Orders date should be: \"+jsonData.date] = jsonData.date == \"Sun, 05 Nov 2017 00:00:00 GMT\";",
									"tests[\"Orders type should be: \"+jsonData.order_type] = jsonData.order_type == \"take-away\";",
									"tests[\"Orders customer id should be: \"+jsonData.customer_id] = jsonData.customer_id == 35;",
									"tests[\"Orders dish id should be: \"+jsonData.dish_id] = jsonData.dish_id == 3;",
									"tests[\"Orders delivery option should be: \"+jsonData.delivery] = jsonData.delivery == \"Customer\";",
									"tests[\"Orders price should be: \"+jsonData.price] = jsonData.price == 946;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/orders/55/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"orders",
								"55",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_order_20",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9ca6c11-d817-4107-9f89-3e6cdc012411",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Order ID is present\"] = responseBody.has(\"order_id\");",
									"tests[\"Orders timestamp is present\"] = responseBody.has(\"timestamp\");",
									"tests[\"Orders type is present\"] = responseBody.has(\"order_type\");",
									"tests[\"Customer ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Orders delivery option is present\"] = responseBody.has(\"delivery\");",
									"tests[\"Orders price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const orderSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"customer_id\",",
									"    \"date\",",
									"    \"delivery\",",
									"    \"dish_id\",",
									"    \"order_id\",",
									"    \"order_type\",",
									"    \"price\",",
									"    \"timestamp\"",
									"  ],",
									"  \"properties\": {",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"date\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"delivery\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"dish_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"timestamp\": {",
									"      \"type\": \"string\"",
									"    }",
									"  }",
									"}",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Order schema is valid\"] = tv4.validate(jsonData, orderSchema);",
									"tests[\"Orders ID should be: \"+jsonData.order_id] = jsonData.order_id == 20;",
									"tests[\"Orders timestamp should be: \"+jsonData.timestamp] = jsonData.timestamp == \"18:45:17\";",
									"tests[\"Orders date should be: \"+jsonData.date] = jsonData.date == \"Sat, 07 Apr 2018 00:00:00 GMT\";",
									"tests[\"Orders type should be: \"+jsonData.order_type] = jsonData.order_type == \"inhouse\";",
									"tests[\"Orders customer id should be: \"+jsonData.customer_id] = jsonData.customer_id == 48;",
									"tests[\"Orders dish id should be: \"+jsonData.dish_id] = jsonData.dish_id == 3;",
									"tests[\"Orders delivery option should be: \"+jsonData.delivery] = jsonData.delivery == \"Cycle\";",
									"tests[\"Orders price should be: \"+jsonData.price] = jsonData.price == 352;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/orders/20/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"orders",
								"20",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get_order_8",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e56050ef-7eea-4c59-b6ee-1ff904ba570e",
								"exec": [
									"// Check status code, acceptable response time and if content-type is in header.",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable: \"+responseTime+ \"ms\"] = responseTime < 600;",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"// Check if objects variables are present.",
									"tests[\"Order ID is present\"] = responseBody.has(\"order_id\");",
									"tests[\"Orders timestamp is present\"] = responseBody.has(\"timestamp\");",
									"tests[\"Orders type is present\"] = responseBody.has(\"order_type\");",
									"tests[\"Customer ID is present\"] = responseBody.has(\"customer_id\");",
									"tests[\"Dish ID is present\"] = responseBody.has(\"dish_id\");",
									"tests[\"Orders delivery option is present\"] = responseBody.has(\"delivery\");",
									"tests[\"Orders price is present\"] = responseBody.has(\"price\");",
									"",
									"// Define the JSON Schema",
									"const orderSchema = {",
									"  \"type\": \"object\",",
									"  \"required\": [",
									"    \"customer_id\",",
									"    \"date\",",
									"    \"delivery\",",
									"    \"dish_id\",",
									"    \"order_id\",",
									"    \"order_type\",",
									"    \"price\",",
									"    \"timestamp\"",
									"  ],",
									"  \"properties\": {",
									"    \"customer_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"date\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"delivery\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"dish_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_id\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"order_type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"price\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"timestamp\": {",
									"      \"type\": \"string\"",
									"    }",
									"  }",
									"}",
									"",
									"// Validate schema and check if objects variables match the values they should get.",
									"var jsonData = JSON.parse(responseBody)",
									"tests[\"Order schema is valid\"] = tv4.validate(jsonData, orderSchema);",
									"tests[\"Orders ID should be: \"+jsonData.order_id] = jsonData.order_id == 8;",
									"tests[\"Orders timestamp should be: \"+jsonData.timestamp] = jsonData.timestamp == \"21:35:11\";",
									"tests[\"Orders date should be: \"+jsonData.date] = jsonData.date == \"Thu, 07 Dec 2017 00:00:00 GMT\";",
									"tests[\"Orders type should be: \"+jsonData.order_type] = jsonData.order_type == \"inhouse\";",
									"tests[\"Orders customer id should be: \"+jsonData.customer_id] = jsonData.customer_id == 16;",
									"tests[\"Orders dish id should be: \"+jsonData.dish_id] = jsonData.dish_id == 7;",
									"tests[\"Orders delivery option should be: \"+jsonData.delivery] = jsonData.delivery == \"Cycle\";",
									"tests[\"Orders price should be: \"+jsonData.price] = jsonData.price == 777;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "localhost:5000/statistics/orders/8/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"orders",
								"8",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "post_input",
			"item": [
				{
					"name": "input new_review",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input_type\": \"new_review\",\n\t\"review_id\": \"999\",\n\t\"course_id\": \"10\",\n\t\"review_text\": \"new_review 222\",\n\t\"score\": \"10\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_course",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_course\",\n    \"course_id\": \"999\",\n    \"course_name\": \"example_course_name\",\n    \"price\": \"123\",\n    \"category\": \"example_category\",\n    \"information\": \"example_info\",\n    \"ingredient_ids\": [\"1\", \"2\", \"3\"]\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_customer\",\n    \"city\": \"example_city\",\n    \"postcode\": \"1234\",\n    \"street_name\": \"example_street\",\n    \"street_number\": \"10\",\n    \"apartment_number\": \"10\",\n    \"first_name\": \"f_name\",\n    \"last_name\": \"l_name\",\n    \"email\": \"example@mail.com\",\n    \"phone\": \"12345678\",\n    \"birthdate\": \"2000-01-01\",\n    \"address_id\": \"10\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_booking\",\n    \"first_name\": \"first_name\",\n    \"last_name\": \"last_name\",\n    \"restaurant_name\": \"restaurant_name\",\n    \"table_id\": \"1\",\n    \"booking_date\": \"2019-01-01\",\n    \"booking_length\": \"2\",\n    \"no_of_seats\": \"2\",\n    \"customer_id\": \"1\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_employee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_employee\",\n    \"restaurant_name\": \"restaurant_name\",\n    \"city\": \"example_city\",\n    \"postcode\": \"1234\",\n    \"street_name\": \"example_street\",\n    \"street_number\": \"10\",\n    \"apartment_number\": \"10\",\n    \"first_name\": \"first_name\",\n    \"last_name\": \"last_name\",\n    \"email\": \"example@mail.com\",\n    \"phone\": \"12345678\",\n    \"birthdate\": \"2000-01-01\",\n    \"salary\": \"166.6\",\n    \"start_date\": \"2019-01-01\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_completed_purchase",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_completed_purchase\",\n    \"purchase_id\": \"999\",\n    \"purchase_time\": \"2019-01-01 00:00:00\",\n    \"price\": \"1234\",\n    \"delivery_method\": \"bicycle\",\n    \"address_id\": \"1\",\n    \"amount\": \"1324\",\n    \"tips\": \"50\",\n    \"discount\": \"90\",\n    \"customer_id\": \"1\",\n    \"payment_id\" : \"1\",\n    \"course_ids_with_quantity\": [[\"10\",\"50\"],[\"11\",\"50\"]]\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_ingredient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_ingredient\",\n    \"ingredient_id\": \"999\",\n    \"ingredient_name\": \"salt\",\n    \"quantity_in_stock\": \"50\",\n    \"allergene_ids_and_names\": [[\"998\",\"hello\"],[\"999\", \"world\"]]\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input update_order_ready_time",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"update_order_ready_time\",\n    \"purchase_id\": \"999\",\n    \"order_ready_time\": \"5\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input update_delivery_finished_time",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"update_delivery_finished_time\",\n    \"purchase_id\": \"999\",\n    \"order_delivered_time\": \"5\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_address",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_address\",\n    \"address_id\": \"999\",\n    \"city\": \"example_city\",\n    \"postcode\": \"1234\",\n    \"street_name\": \"example_street\",\n    \"street_number\": \"10\",\n    \"apartment_number\": \"10\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				},
				{
					"name": "input new_restaurant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de05808a-7bd1-4cee-b249-74a66dd6f5b2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9abae40e-2d23-43bd-8e47-d825d4600191",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input_type\": \"new_restaurant\",\n    \"restaurant_id\": \"999\",\n    \"restaurant_name\": \"example_restaurant_name\",\n    \"postcode\": \"1234\",\n    \"phone\": \"12345678\",\n    \"address_id\": \"1\"\n}"
						},
						"url": {
							"raw": "http://localhost:5000/statistics/input",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"statistics",
								"input"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}